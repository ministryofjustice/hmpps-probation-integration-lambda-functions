version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.1.0
  hmpps: ministryofjustice/hmpps@5.1
  jira: circleci/jira@1.3.1
  python: circleci/python@2.0.3
  slack: circleci/slack@4.4.2

parameters:
  workflow-directory:
    type: string
    default: .
  node-version:
    type: string
    default: lts

jobs:
  checkout-workspace:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - persist_to_workspace:
          root: << pipeline.parameters.workflow-directory >>
          paths:
            - '*'

  npm-build:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Update npm
          command: 'npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm ci --no-audit
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - ~/.cache
      - run:
          name: Build
          command: |
            DATE=$(date '+%Y-%m-%d')
            export BUILD_NUMBER=${DATE}.${CIRCLE_BUILD_NUM}
            export GIT_REF="$CIRCLE_SHA1"
            npm run record-build-info
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - dist

  npm-test:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Update npm
          command: 'npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm ci --no-audit
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - ~/.cache
      - run: # Run linter after build because the integration test code depend on compiled typescript...
          name: Linter check
          command: npm run lint
      - run:
          name: Run tests
          command: npm run test
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test_results/unit-test-reports.html

  python-build:
    executor: python/default
    steps:
      - attach_workspace:
          at: ./
      - python/install-packages:
          args: --target ./
      - persist_to_workspace:
          root: .
          paths:
            - '*'

  python-test:
    executor: python/default
    steps:
      - attach_workspace:
          at: ./
      - run: python -m pytest --junit-xml=test_results/report.xml
      - store_test_results:
          path: test_results

  package:
    docker:
      - image: cimg/base:current
    parameters:
      directory:
        type: string
        default: .
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Create zip file
          command: |
            working_directory=$(pwd)
            cd '<< parameters.directory >>'
            zip -r package.zip .
            mv package.zip "${working_directory}"
      - persist_to_workspace:
          name: Persist zip file
          root: .
          paths:
            - package.zip
      - store_artifacts:
          path: package.zip
      - jira/notify

  deploy:
    executor: python/default
    parameters:
      environment_name:
        type: string
      environment_type:
        type: enum
        enum:
          - production
          - staging
          - testing
          - development
          - unmapped
    steps:
      - attach_workspace:
          at: ./
      - aws-cli/install
      - aws-cli/setup:
          profile-name: default
      - aws-cli/role-arn-setup:
          profile-name: deploy
          source-profile: default
          role-arn: ${AWS_ROLE_ARN}
      - run:
          name: Upload to Lambda
          command: aws lambda update-function-code --profile deploy --function-name "<< parameters.environment_name >>-<< pipeline.parameters.workflow-directory >>" --zip-file fileb://package.zip
      - jira/notify:
          job_type: deployment
          environment: ${AWS_ECS_ENV_NAME}
          environment_type: << parameters.environment_type >>

  no-changes:
    docker:
      - image: cimg/base:current
    steps:
      - run: echo "No changes detected"

workflows:
  version: 2

  deploy-template:
    when: false
    jobs:
      - package
      - &deploy-to-test
        deploy:
          name: deploy-to-test
          environment_type: testing
          environment_name: delius-test
          context:
            - hmpps-common-vars
            - hmpps-delius-deploy-to-ecs-test
          requires:
            - package
      - &deploy-to-pre-prod
        deploy:
          name: deploy-to-pre-prod
          environment_type: staging
          environment_name: delius-pre-prod
          context:
            - hmpps-common-vars
            - hmpps-delius-deploy-to-ecs-pre-prod
          requires:
            - deploy-to-test
          filters:
            branches:
              only:
                - main
      - &approve-to-prod
        request-prod-approval:
          type: approval
          requires:
            - deploy-to-pre-prod
      - &deploy-to-prod
        deploy:
          name: deploy-to-prod
          environment_type: production
          environment_name: delius-prod
          context:
            - hmpps-common-vars
            - hmpps-delius-deploy-to-ecs-prod
          requires:
            - request-prod-approval

  npm-template:
    when: false
    jobs: &npm-jobs
      - checkout-workspace
      - npm-build:
          requires:
            - checkout-workspace
      - npm-test:
          requires:
            - checkout-workspace
      - package:
          directory: dist
          context:
            - hmpps-common-vars
          requires:
            - npm-build
            - npm-test
      - <<: *deploy-to-test
      - <<: *deploy-to-pre-prod
      - <<: *approve-to-prod
      - <<: *deploy-to-prod

  python-template:
    when: false
    jobs: &python-jobs
      - checkout-workspace
      - python-build:
          requires:
            - checkout-workspace
      - python-test:
          requires:
            - python-build
      - package:
          context:
            - hmpps-common-vars
          requires:
            - python-test
      - <<: *deploy-to-test
      - <<: *deploy-to-pre-prod
      - <<: *approve-to-prod
      - <<: *deploy-to-prod

  no-changes:
    when:
      equal: [ << pipeline.parameters.workflow-directory >>, . ]
    jobs:
      - no-changes

  deploy-pre-sentence-report-handler:
    when:
      equal: [ << pipeline.parameters.workflow-directory >>, pre-sentence-report-handler ]
    jobs: *python-jobs

  deploy-workload-allocation-handler:
    when:
      equal: [ << pipeline.parameters.workflow-directory >>, workload-allocation-handler ]
    jobs: *npm-jobs
